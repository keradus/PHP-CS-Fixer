A lot of needed fixes are similar one to another. Would be great to have generic code that could be reused for similar fixres.

3.2
---
[done] `php_unit_no_expectation_annotation`: anontations `@expectedException @expectedExceptionCode @expectedExceptionMessage` into respective methods
[awaits]    + integration test of `php_unit_no_expectation_annotation`+`php_unit_expectation`
[awaits]    + integration test of `php_unit_no_expectation_annotation`+`no_empty_phpdoc`
[awaits]    + integration test of `php_unit_no_expectation_annotation`+string notation ?
[awaits]    + drop general annotation from local config
[awaits]    + add ruleset for 3.2

4.3
---
[DONE] `php_unit_no_expectation_annotation`: like 3.2 but with `@expectedExceptionMessageRegExp`
[awaits]    + add ruleset for 4.3

5.2
---
[DONE] `php_unit_expectation`: `setExpectedException` -> `expectException` + `expectExceptionMessage` + `expectExceptionCode`

5.6
---
[DONE] `php_unit_expectation`: `setExpectedExceptionRegExp` -> `expectException` + `expectExceptionMessageRegExp` + `expectExceptionCode`
[DONE] `php_unit_dedicate_assert`:
    is_dir      -> assertDirectoryExists / assertDirectoryNotExists
    is_readable -> assertIsReadable / assertNotIsReadable
    is_writable -> assertIsWritable / assertNotIsWritable

5.7 [awaits]
------------
Similar to `PHPUnit_Framework_TestCase` we already have fixer for (this branch), we need to:
`PHPUnit_Framework_Assert` -> `PHPUnit\Framework\Assert`
`PHPUnit_Framework_BaseTestListener` -> `PHPUnit\Framework\BaseTestListener`
`PHPUnit_Framework_TestListener` -> `PHPUnit\Framework\TestListener`
Probably best way of doing this if via new `General***` fixer

6.0 [awaits]
------------
whole code is namespaced now: `PHPUnit_**_*_*` -> `PHPUnit\**\*\*`
    while changing `Foo\Bar\Baz` -> `Xxx`
        when changing from `Foo\Bar\Baz as Dupa` -> no need to check if `Xxx` is also imported, as only alias name will be used
        when changing from `Foo\Bar\Baz` -> we need to check if `Xxx` is also imported, and if so, we shall produce `Xxx as Baz` (as we know Baz is possible to use)
    what about partial imports ?
